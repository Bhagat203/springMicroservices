microservices(small autonomous services that work together)
small deployable Units 
Cloud enabled

Challenges in microservices
1. Bounded Context
2. Configuration MAnagement
3. Dynamic Scale Up and scale down
4. Visibility
5. Prevent fault tollerance 
 
Spring cloud
provides tools to quickly build some of the common pattern in distributed systems
(Eg: configuration management, service discovery etc)
Spring Cloud config Server provides an approach where we store all the configuration 
in Git server and spring config server can be used to expose the config all the services 
Dynamic Scale Up and scale down
 1. Naming Server (Eureka) all the instance of the all microsevice will register here and gives the instances
 2. Ribbon (CLient Side Loading Balancing) 
 3. Feign (Easier REST Clients) mechanism to write simple restfull client
Visiblilty and Monitoring
 1. Zipkin Distributed Tracing server 
 2. Netflix API Gateway  
Fault Tolerance 
 1. Hystrix

Advantage of Microservices
New Technology and adaption of new technology and process easily
Dynamic Scale
Faster Release cycles 

PORTS
Limits Services 8080,8081
Spring Cloud Config 8888
Currency Exchange 8000,8001,8002,..
Currency conversion Service 8100,8101,8102,..
Netfix Eureka 8761
Netfiz Zuul API Gateway Server 8765
Zipkin DIstributed Tracing Server 9411

dependencies
Config Client that connects spring cloud server


steps to get data from the properties files
limits-service.minimum=2
limits-service.maximum=99

Create a Config class 
@Component
@ConfigurationProperties("limits-service")
public class Config {
	private int minimum;
	private int maximum;
	..with setter and getters
}
From config get using getter and setters

and Config Server dependency create another project 
Change the port number 
spring.application.name=spring-cloud-config-server
server.port=8888

Create a folder without spaces 
and add a properties file
Eg: cd git-localcongif-repo
git init
notepad limits-service.proterties
git add *
git commit -m "adding limit service"

Process to connect spring cloud config server with git
	After that in server project add the properties
	spring.cloud.config.server.git.uri=file:///E:/git-localconfig-repo/

	And add the Annotation to the ServerApplicaton as @enableConfigServer
	after that run as http://localhost:8888/limits-service/default
Process to connect the Limit service with the Spring Cloud Config server
	spring.config.import=optional:configserver:http://localhost:8888
	spring.application.name=limits-service

Store multiple properties in git hub repo
create the multiple properties
limits-service-qa.proterties
limits-service-dev.proterties

For running the code : http://localhost:8888/limits-service/dev|qa

Typially when you want to support multiple environment in spring appln using proflies
spring.profiles.active=dev
spring.cloud.config.profile=dev

If you rename the properties file and use it 
spring.cloud.config.name= name of file
now can use it 


If i want to get the port number 
the their is a class Environment of import org.springframework.core.env.Environment;
where a method getProperty("local.server.port") will provide the port number
-Dserver.port=8001 in run configuration will override server port

Call one microservices to another 
Using RestTemplate is used to make the API calls 
which has a method getForEntity(agr1,agr2,agr3) return ResponseEntity
agr1-link of the request
arg2- Class which you to apply on
arg3-HashMap which as key and value pair of the requiered one
EG:
	@GetMapping("/from/{from}/to/{to}/quantity/{quantity}")
	public CurrencyConversion calculateCurrency( @PathVariable String from,@PathVariable String to, @PathVariable BigDecimal quantity) {
		HashMap<String, String> uriVariables = new HashMap<String, String>();
		uriVariables.put("from", from);
		uriVariables.put("to", to);
		ResponseEntity<CurrencyConversion> conversion1= new RestTemplate().getForEntity("http://localhost:8001/currency-exchange/from/{from}/to/{to}", CurrencyConversion.class,uriVariables);
		CurrencyConversion conversion=conversion1.getBody();
		conversion.setQuantity(quantity);
		conversion.setTotalCalulatedDecimal(conversion.getConversionMultiple().multiply(quantity));
		conversion.setEnvironment(env.getProperty("local.server.port"));
		return conversion;
		
	}
For calling spring cloud provides us framework called feign
feign makes easy to call other microservices
add dependency called as open feign
  <dependencies>
    <dependency>
      <groupId>org.springframework.cloud</groupId>
      <artifactId>spring-cloud-starter-openfeign</artifactId>
    </dependency>
Add @EnableFeignClients in StringBoot Application

Create an interface where add @FeignClient(name="currency-exchange", url="localhost:8001")//here the name should be the typically name of appln which we are calling

add the method from the controller to which to you want to call and change the return type ie another microservices controller class method

and in controller create a reference and using that reference call the method in the interface

In the above we are doin the hardcoding for the url
to overcome that we go for service registry or Naming server (eureka)

create new project with eureka has a dependency

Add the annotation @EnableEurekaServer

add the propeties with server.port
eureka.client.register-with-eureka=false // do not want register with itself
eureka.client.fetch-registry=false

Register the two microservices for that add the dependency in two microservices eureka client
Add the dependency in the two client microservices
eureka.clent.serviceURL.defaultZone=http://localhost:8761/eureka

For Load Balancing bw many instances
remove url attributes
Load balancing is done at client side


For authentication implementation we go for a API gateway
 ie.Spring Cloud gateway
create the project with dependency api gateway
if required add the link eureka client service Url 